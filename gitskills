1、git add  把文件添加到暂存区
2、git commit -m xxx 提交暂存区所有的文件提交到当前分支 -m后面为本次提交的说明
3、git status 返回仓库的当前状态
4、git diff 查看修改内容
5、git log 查看修改历史
6、git reset --hard HEAD^ 版本回退HEAD表示当前版本HEAD^表示上一版本
7、git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区
8、git reflog 查看历史命令
9、git管理的是修改。
10、git diff HEAD -- readme.txt  可以查看工作区和版本库里面最新版本的区别
11、git checkout -- file可以丢弃工作区的修改
12、git rm用于删除一个文件
13、git push命令，实际上是把当前分支master推送到远程要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
14、git branch命令会列出所有分支，当前分支前面会标一个*号
15、git checkout命令加上-b参数表示创建并切换 
16、git merge命令用于合并指定分支到当前分支
17、Git分支小结：
18、查看分支：git branch
19、创建分支：git branch <name>
20、切换分支：git checkout <name>
21、创建+切换分支：git checkout -b <name>
22、合并某分支到当前分支：git merge <name>
23、删除分支：git branch -d <name>
=======git branch test=======
24、git log --graph命令可以看到分支合并图。
25、--no-ff参数，表示禁用FastForward合并后的历史有分支，能看出来曾经做过合并而fast forward合并就看不出来曾经做过合并。
26、开发一个新feature，最好新建一个分支，如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
27、并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！
28、查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
